package uk.ac.ebi.tsc.portal.clouddeployment.application;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.fail;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.io.IOUtils;
import org.junit.Before;
import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import uk.ac.ebi.tsc.portal.clouddeployment.model.StateFromTerraformOutput;

/**
 * This test was based on outputs generated by running https://github.com/EMBL-EBI-TSI/cpa-bioexcel-cwl
 * in ECP using different Terraform versions (reflecting the upgrading of EBI's OpenStack offering).
 * <p>
 * As at 23rd Sep 2021 the production ECP (served by "ecp-master") has Terraform v0.9.11 installed
 * on the fs deploying to "extcloud05" (https://extcloud05.ebi.ac.uk/), which is due to be taken
 * out of service by 1st Nov 2021 and replaced with "Embassy4" (https://uk1.embassy.ebi.ac.uk/).
 * In the future the deployment process will switch from Terraform on native fs to docker-based (as
 * per https://github.com/EMBL-EBI-TSI/cpa-ecp-agent)
 * <p>
 * Note: It's possible (i.e. I haven't verified) that the {@code terraform.tfstate} files are moved
 *       to {@code terraform.tfstate.backup} on application destroy?
 * 
 * @author geoff
 */
public class ApplicationDeployerHelperTest {

    private static final Map<String, String> outputs = new HashMap<String, String>();

    /*
     * As at 23rd Sep 2021 - Non-docker
     * 
     * [root@ecp-master ~]# terraform --version
     * Terraform v0.9.11
     * [root@ecp-master ~]# terraform show /home/ecpService/cloud-portal-api/working/be_deployments_folder/TSI1632315468941/terraform.tfstate.backup
     */
    private static final String outputTf0_9_11 = "/uk/ac/ebi/tsc/portal/clouddeployment/application/terraform-v0_9_11-show.output";
    /*
     * Terraform v1.0.4 (In-docker assignment (https://github.com/EMBL-EBI-TSI/cpa-ecp-agent))
     * dir_app=~/workspace/be_applications_folder/usr-e2eadb01-feb4-46db-83f5-9aa258203c1d/cpa-bioexcel-cwl/ostack/terraform/
     * dir_deploy=~/workspace/be_deployments_folder/TSI1632342802695
     * 
     * terraform -chdir=${dir_app} show -json ${dir_deploy}/terraform.tfstate
     */
    private static final String outputTf1_0_4json = "/uk/ac/ebi/tsc/portal/clouddeployment/application/terraform-v1_0_4-show-json.output";

    // StateFromTerraformOutput content
    private static final String sftoId0_9_11 = "45.86.170.133/a1f82310-2063-4755-a4a2-0ff80c6cd6c1/";
    private static final String sftoId1_0_4 = "45.88.80.121/8503b1d5-62ad-452a-948b-72f91a4269a9/";
    private static final String sftoFloatingIp0_9_11 = "45.86.170.133";
    private static final String sftoFloatingIp1_0_4 = "45.88.80.121";

    private static final String outputKeySshCommand = "ssh_command";
    private static final String outputKeyExternalIp = "external_ip";
    private static final String outputKeySshUser = "ssh_user";

    private StateFromTerraformOutput stateFromTerraformOutput;
    private static String contentShow0_9_11;
    private static String contentShow1_0_4json;

    private static final Logger logger = LoggerFactory.getLogger(ApplicationDeployerHelperTest.class);

    static {
        try {
            contentShow0_9_11  = IOUtils.toString(ApplicationDeployerHelperTest.class.getResourceAsStream(outputTf0_9_11),
                                                  "UTF-8");
            contentShow1_0_4json = IOUtils.toString(ApplicationDeployerHelperTest.class.getResourceAsStream(outputTf1_0_4json),
                                                    "UTF-8");
        } catch (IOException e) {
            fail("ApplicationDeployerHelperTest failed to read required resources : '" + e.getMessage() + "'");
        }
    }

    {
        // instance initialisation, so should be good to go if using a static var (along with
        // jUnit's "new instance" per test mechanism and default sequential test running!)
        outputs.put(outputKeySshCommand, "");
        outputs.put(outputKeyExternalIp, "");
        outputs.put(outputKeySshUser, "");
    }

    @Before
    public void setUp() throws IOException {
    }

    @Test
    public void testTerraformStateFromString0_9_11() throws IOException {
        stateFromTerraformOutput = ApplicationDeployerHelper.terraformStateFromString(contentShow0_9_11,
                                                                                      outputs, logger);

        // Evaluate returned StateFromTerraformOutput object content
        assertNull(stateFromTerraformOutput.getImageName());
        assertNull(stateFromTerraformOutput.getGeneratedOutputs());
        assertEquals(sftoId0_9_11, stateFromTerraformOutput.getId());
        assertEquals(sftoFloatingIp0_9_11, stateFromTerraformOutput.getAccessIp());

        // Evaluate application outputs
        assertEquals(outputs.get(outputKeySshCommand), "ssh ubuntu@45.86.170.133");
        assertEquals(outputs.get(outputKeyExternalIp), sftoFloatingIp0_9_11);
        assertEquals(outputs.get(outputKeySshUser), "ubuntu");
    }

    @Test
    public void testTerraformStateFromString1_0_4json() throws IOException {
        stateFromTerraformOutput = ApplicationDeployerHelper.terraformStateFromString(contentShow1_0_4json,
                                                                                      outputs, logger);

        // Evaluate returned StateFromTerraformOutput object content
        assertNull(stateFromTerraformOutput.getImageName());
        assertNull(stateFromTerraformOutput.getGeneratedOutputs());
        assertEquals(sftoId1_0_4, stateFromTerraformOutput.getId());
        assertEquals(sftoFloatingIp1_0_4, stateFromTerraformOutput.getAccessIp());

        // Evaluate application outputs
        assertEquals(outputs.get(outputKeySshCommand), "ssh ubuntu@45.88.80.121");
        assertEquals(outputs.get(outputKeyExternalIp), sftoFloatingIp1_0_4);
        assertEquals(outputs.get(outputKeySshUser), "ubuntu");
    }
}